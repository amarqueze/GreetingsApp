buildscript {
	ext {
        javaVersion = '11'
        openApiVersion = '1.6.3'
		springBootVersion = '2.5.3'
        objectMapperVersion = '0.1.0'               
		jacocoVersion = '0.8.5'
        lombokVersion = '1.18.16'
	}
}

plugins {
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'jacoco'
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'

    group = 'co.greetings'
    version = 'RELEASE'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    dependencies {
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly  "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor  "org.projectlombok:lombok:${lombokVersion}"
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            html.required = true          
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory = file("$buildDir/reports")
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
        '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}